<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Intuit.Ipp.Retry</name>
    </assembly>
    <members>
        <member name="T:Intuit.Ipp.Retry.NamespaceDoc">
            <summary>
            Intuit.Ipp.Retry is used to retry service calls defined in the user retry policy. 
            It enables applications to handle transient errors such as dropped connections. 
            Retries are supported for the following types of exceptions: ProtocolError, ConnectionClosed, ConnectFailure and Timeout.
            </summary>
        </member>
        <member name="T:Intuit.Ipp.Retry.IExtendedRetry">
            <summary>
            Custom exception retry strategy contracts.
            </summary>
        </member>
        <member name="M:Intuit.Ipp.Retry.IExtendedRetry.IsRetryException(System.Exception)">
            <summary>
            Determines whether [is retry exception] [the specified ex].
            </summary>
            <param name="ex">The exception object.</param>
            <returns>
              <c>true</c> if [is parameter (ex) is retry exception]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Intuit.Ipp.Retry.IntuitRetryingEventArgs">
            <summary>
            Contains information required for the IntuitRetryPolicy retrying event.
            </summary>
        </member>
        <member name="M:Intuit.Ipp.Retry.IntuitRetryingEventArgs.#ctor(System.Int32,System.TimeSpan,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Intuit.Ipp.Retry.IntuitRetryingEventArgs"/> class.
            </summary>
            <param name="currentRetryCount">The current retry attempt count.</param>
            <param name="delay">The delay indicating how long the current thread will be suspended for before the next iteration will be invoked.</param>
            <param name="lastException">The exception which caused the retry conditions to occur.</param>
        </member>
        <member name="P:Intuit.Ipp.Retry.IntuitRetryingEventArgs.CurrentRetryCount">
            <summary>
            Gets the current retry count.
            </summary>
        </member>
        <member name="P:Intuit.Ipp.Retry.IntuitRetryingEventArgs.Delay">
            <summary>
            Gets the delay which indicates how long the current thread will be suspended for before the next iteration will be invoked.
            </summary>
        </member>
        <member name="P:Intuit.Ipp.Retry.IntuitRetryingEventArgs.LastException">
            <summary>
            Gets the exception which caused the retry conditions to occur.
            </summary>
        </member>
        <member name="T:Intuit.Ipp.Retry.ShouldRetry">
            <summary>
            Defines a delegate that will be invoked whenever a retry condition is encountered.
            </summary>
            <param name="retryCount">The current retry attempt count.</param>
            <param name="lastException">The exception which caused the retry conditions to occur.</param>
            <param name="delay">The delay delay which indicates how long the current thread will be suspended for before the next iteration will be invoked.</param>
            <returns>Returns a delegate that will be invoked whenever to retry should be attempt.</returns>
        </member>
        <member name="T:Intuit.Ipp.Retry.IntuitRetryPolicy">
            <summary>
             Provides the retry mechanism for unreliable actions and transient conditions.
            </summary>
        </member>
        <member name="F:Intuit.Ipp.Retry.IntuitRetryPolicy.context">
            <summary>
            The Service Context.
            </summary>
        </member>
        <member name="F:Intuit.Ipp.Retry.IntuitRetryPolicy.shouldRetry">
            <summary>
            Delegate that will be invoked whenever a retry condition is encountered.
            </summary>
        </member>
        <member name="F:Intuit.Ipp.Retry.IntuitRetryPolicy.retryCount">
            <summary>
            The Retry Count.
            </summary>
        </member>
        <member name="F:Intuit.Ipp.Retry.IntuitRetryPolicy.retryInterval">
            <summary>
            The Retry Interval.
            </summary>
        </member>
        <member name="F:Intuit.Ipp.Retry.IntuitRetryPolicy.initialInterval">
            <summary>
            The initial interval value that will apply for the first retry.
            </summary>
        </member>
        <member name="F:Intuit.Ipp.Retry.IntuitRetryPolicy.increment">
            <summary>
            The incremental time value that will be used for calculating the progressive delay between retries.
            </summary>
        </member>
        <member name="F:Intuit.Ipp.Retry.IntuitRetryPolicy.minBackOff">
            <summary>
            The minimum back-off time.
            </summary>
        </member>
        <member name="F:Intuit.Ipp.Retry.IntuitRetryPolicy.maxBackOff">
            <summary>
            The maximum back-off time.
            </summary>
        </member>
        <member name="F:Intuit.Ipp.Retry.IntuitRetryPolicy.deltaBackOff">
            <summary>
            The value which will be used to calculate a random delta in the exponential delay between retries.
            </summary>
        </member>
        <member name="M:Intuit.Ipp.Retry.IntuitRetryPolicy.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Intuit.Ipp.Retry.IntuitRetryPolicy"/> class from being created.
            </summary>
        </member>
        <member name="M:Intuit.Ipp.Retry.IntuitRetryPolicy.#ctor(Intuit.Ipp.Core.ServiceContext,System.Int32,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Intuit.Ipp.Retry.IntuitRetryPolicy"/> class.
            </summary>
            <param name="context">The service context.</param>
            <param name="retryCount">The number of retry attempts.</param>
            <param name="retryInterval">The time interval between retries.</param>
        </member>
        <member name="M:Intuit.Ipp.Retry.IntuitRetryPolicy.#ctor(System.Int32,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Intuit.Ipp.Retry.IntuitRetryPolicy"/> class.
            </summary>
            <param name="retryCount">The number of retry attempts.</param>
            <param name="retryInterval">The time interval between retries.</param>
        </member>
        <member name="M:Intuit.Ipp.Retry.IntuitRetryPolicy.#ctor(Intuit.Ipp.Core.ServiceContext,System.Int32,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Intuit.Ipp.Retry.IntuitRetryPolicy"/> class.
            </summary>
            <param name="context">The service context.</param>
            <param name="retryCount">The number of retry attempts.</param>
            <param name="initialInterval">The initial interval that will apply for the first retry.</param>
            <param name="increment">The incremental time value that will be used for calculating the progressive delay between retries.</param>
        </member>
        <member name="M:Intuit.Ipp.Retry.IntuitRetryPolicy.#ctor(System.Int32,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Intuit.Ipp.Retry.IntuitRetryPolicy"/> class.
            </summary>
            <param name="retryCount">The number of retry attempts.</param>
            <param name="initialInterval">The initial interval that will apply for the first retry.</param>
            <param name="increment">The incremental time value that will be used for calculating the progressive delay between retries.</param>
        </member>
        <member name="M:Intuit.Ipp.Retry.IntuitRetryPolicy.#ctor(Intuit.Ipp.Core.ServiceContext,System.Int32,System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Intuit.Ipp.Retry.IntuitRetryPolicy"/> class.
            </summary>
            <param name="context">The service context.</param>
            <param name="retryCount">The maximum number of retry attempts.</param>
            <param name="minBackoff">The minimum back-off time</param>
            <param name="maxBackoff">The maximum back-off time.</param>
            <param name="deltaBackoff">The value which will be used to calculate a random delta in the exponential delay between retries.</param>
        </member>
        <member name="M:Intuit.Ipp.Retry.IntuitRetryPolicy.#ctor(System.Int32,System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Intuit.Ipp.Retry.IntuitRetryPolicy"/> class.
            </summary>
            <param name="retryCount">The maximum number of retry attempts.</param>
            <param name="minBackoff">The minimum back-off time</param>
            <param name="maxBackoff">The maximum back-off time.</param>
            <param name="deltaBackoff">The value which will be used to calculate a random delta in the exponential delay between retries.</param>
        </member>
        <member name="E:Intuit.Ipp.Retry.IntuitRetryPolicy.Retrying">
            <summary>
            An instance of a callback delegate that will be invoked whenever a retry condition is encountered.
            </summary>
        </member>
        <member name="P:Intuit.Ipp.Retry.IntuitRetryPolicy.ExtendedRetryException">
            <summary>
            Gets or sets the extended exception retry strategy.
            </summary>
            <value>
            The extended exception retry strategy.
            </value>
        </member>
        <member name="M:Intuit.Ipp.Retry.IntuitRetryPolicy.ExecuteAction(System.Action)">
            <summary>
            Repetitively executes the specified action while it satisfies the current retry policy.
            </summary>
            <param name="action">A delegate representing the executable action which doesn't return any results.</param>
        </member>
        <member name="M:Intuit.Ipp.Retry.IntuitRetryPolicy.ExecuteAction(System.Action{System.AsyncCallback},System.Action{System.IAsyncResult},System.Action,System.Action{System.Exception})">
            <summary>
            Repetitively executes the specified asynchronous action while it satisfies the current retry policy.
            </summary>
            <param name="beginAction">The begin method of the async pattern.</param>
            <param name="endAction">The end method of the async pattern.</param>
            <param name="successHandler">The action to perform when the async operation is done.</param>
            <param name="faultHandler">The fault handler delegate that will be triggered if the operation cannot be successfully invoked despite retry attempts.</param>
        </member>
        <member name="M:Intuit.Ipp.Retry.IntuitRetryPolicy.ExecuteAction``1(System.Action{System.AsyncCallback},System.Func{System.IAsyncResult,``0},System.Action{``0},System.Action{System.Exception})">
            <summary>
            Repetitively executes the specified asynchronous action while it satisfies the current retry policy.
            </summary>
            <typeparam name="TResult">The type of the object returned by the async operation.</typeparam>
            <param name="beginAction">The begin method of the async pattern.</param>
            <param name="endAction">The end method of the async pattern.</param>
            <param name="successHandler">The action to perform when the async operation is done.</param>
            <param name="faultHandler">The fault handler delegate that will be triggered if the operation cannot be successfully invoked despite retry attempts.</param>
        </member>
        <member name="M:Intuit.Ipp.Retry.IntuitRetryPolicy.OnRetrying(System.Int32,System.Exception,System.TimeSpan)">
            <summary>
            Notifies the subscribers whenever a retry condition is encountered.
            </summary>
            <param name="retryCount">The current retry attempt count.</param>
            <param name="lastError">The exception which caused the retry conditions to occur.</param>
            <param name="delay">The delay indicating how long the current thread will be suspended for before the next iteration will be invoked.</param>
        </member>
        <member name="M:Intuit.Ipp.Retry.IntuitRetryPolicy.CheckIsTransient(System.Exception)">
            <summary>
            Checks whether parameter ex is transient exception or not.
            </summary>
            <param name="ex">The exception.</param>
            <returns>Returns whether transient exception or not.</returns>
        </member>
        <member name="M:Intuit.Ipp.Retry.IntuitRetryPolicy.IsTransient(System.Exception)">
            <summary>
            Determines whether the specified exception represents a transient failure that can be compensated by a retry.
            </summary>
            <param name="ex">The exception object to be verified.</param>
            <returns>True if the specified exception is considered as transient, otherwise false.</returns>
        </member>
        <member name="M:Intuit.Ipp.Retry.IntuitRetryPolicy.ExecuteAction``1(System.Func{``0})">
            <summary>
            Repetitively executes the specified action while it satisfies the current retry policy.
            </summary>
            <typeparam name="TResult">The type of result expected from the executable action.</typeparam>
            <param name="func">A delegate representing the executable action which returns the result of type R.</param>
            <returns>The result from the action.</returns>
        </member>
        <member name="M:Intuit.Ipp.Retry.IntuitRetryPolicy.GetShouldFixedRetry">
            <summary>
            Returns the ShouldRetry delegate for Fixed retry policy.
            </summary>
            <returns>The ShouldRetry delegate.</returns>
        </member>
        <member name="M:Intuit.Ipp.Retry.IntuitRetryPolicy.GetShouldIncrementalRetry">
            <summary>
            Returns the ShouldRetry delegate for Incremental retry policy.
            </summary>
            <returns>The ShouldRetry delegate.</returns>
        </member>
        <member name="M:Intuit.Ipp.Retry.IntuitRetryPolicy.GetShouldExponentialBackOffRetry">
            <summary>
            Returns the ShouldRetry delegate for ExponentialBackOff retry policy.
            </summary>
            <returns>The ShouldRetry delegate.</returns>
        </member>
        <member name="T:Intuit.Ipp.Retry.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Intuit.Ipp.Retry.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Intuit.Ipp.Retry.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Intuit.Ipp.Retry.Properties.Resources.ArgumentCannotBeGreaterThanBaseline">
            <summary>
              Looks up a localized string similar to The specified argument {0} cannot be greater than its ceiling value of {1}..
            </summary>
        </member>
        <member name="P:Intuit.Ipp.Retry.Properties.Resources.ArgumentCannotBeNegative">
            <summary>
              Looks up a localized string similar to The specified argument {0} cannot be initialized with a negative value..
            </summary>
        </member>
        <member name="P:Intuit.Ipp.Retry.Properties.Resources.RetryLimitExceeded">
            <summary>
              Looks up a localized string similar to The action has exceeded its defined retry limit..
            </summary>
        </member>
        <member name="T:Intuit.Ipp.Retry.IntuitRetryHelper">
            <summary>
            Class contains Helper Methods for Services.
            </summary>
        </member>
        <member name="M:Intuit.Ipp.Retry.IntuitRetryHelper.IsArgumentNull(System.Object,System.String)">
            <summary>
            Checks an argument to ensure it isn't null.
            </summary>
            <param name="argumentValue">The argument value to check.</param>
            <param name="argumentName">The name of the argument.</param>
            /// <returns>The return value should be ignored. It is intended to be used only when validating arguments during instance creation (e.g. when calling base constructor).</returns>
        </member>
        <member name="M:Intuit.Ipp.Retry.IntuitRetryHelper.ArgumentNotNegativeValue(System.Int32,System.String)">
            <summary>
            Checks an argument to ensure that its value is not negative.
            </summary>
            <param name="argumentValue">The <see cref="T:System.Int32"/> value of the argument.</param>
            <param name="argumentName">The name of the argument for diagnostic purposes.</param>
        </member>
        <member name="M:Intuit.Ipp.Retry.IntuitRetryHelper.ArgumentNotNegativeValue(System.Int64,System.String)">
            <summary>
            Checks an argument to ensure that its value is not negative.
            </summary>
            <param name="argumentValue">The <see cref="T:System.Int64"/> value of the argument.</param>
            <param name="argumentName">The name of the argument for diagnostic purposes.</param>
        </member>
        <member name="M:Intuit.Ipp.Retry.IntuitRetryHelper.ArgumentNotGreaterThan(System.Double,System.Double,System.String)">
            <summary>
            Checks an argument to ensure that its value doesn't exceed the specified ceiling baseline.
            </summary>
            <param name="argumentValue">The <see cref="T:System.Double"/> value of the argument.</param>
            <param name="ceilingValue">The <see cref="T:System.Double"/> ceiling value of the argument.</param>
            <param name="argumentName">The name of the argument for diagnostic purposes.</param>
        </member>
    </members>
</doc>
